apply plugin: 'com.android.library'
//apply plugin: 'com.novoda.bintray-release'

Properties properties = new Properties()
final def bintrayPropertiesFile = project.rootProject.file('bintray.properties')
if (bintrayPropertiesFile.exists()) properties.load(bintrayPropertiesFile.newDataInputStream())

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 2
        versionName "1.0.2"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {

    //support
    api(rootProject.ext.dependencies["support-v4"]) {
        exclude module: 'support-annotations'
    }
    api(rootProject.ext.dependencies["appcompat"]) {
        exclude module: 'support-annotations'
    }

    api rootProject.ext.dependencies["design"]
    api(rootProject.ext.dependencies["recyclerview-v7"]) {
        exclude module: 'support-annotations'
    }

    api rootProject.ext.dependencies["constraint-layout"]

    api rootProject.ext.dependencies["annotations"]

    api rootProject.ext.dependencies["multidex"]

    //view
    api(rootProject.ext.dependencies["butterknife"]) {
        exclude module: 'annotation'
        exclude module: 'core'
    }

    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'annotation'
    }

    //rx
    api rootProject.ext.dependencies["rxjava2"]
    api(rootProject.ext.dependencies["rxandroid2"]) {
        exclude module: 'rxjava'
    }

    api(rootProject.ext.dependencies["rxlifecycle3"]) {
        exclude module: 'rxjava'
        exclude module: 'jsr305'
    }
    api(rootProject.ext.dependencies["rxlifecycle3-android"]) {
        exclude module: 'support-annotations'
        exclude module: 'rxjava'
        exclude module: 'rxandroid'
        exclude module: 'rxlifecycle'
    }

    api (rootProject.ext.dependencies["rxlifecycle3-components"]) {
        exclude module: 'rxjava'
        exclude module: 'rxandroid'
        exclude module: 'appcompat'
    }

    //network
    api(rootProject.ext.dependencies["retrofit"]) {
        exclude module: 'okhttp'
        exclude module: 'okio'
    }
    api(rootProject.ext.dependencies["retrofit-converter-gson"]) {
        exclude module: 'gson'
        exclude module: 'okhttp'
        exclude module: 'okio'
        exclude module: 'retrofit'
    }
    api(rootProject.ext.dependencies["retrofit-adapter-rxjava2"]) {
        exclude module: 'rxjava'
        exclude module: 'okhttp'
        exclude module: 'retrofit'
        exclude module: 'okio'
    }
    api rootProject.ext.dependencies["okhttp3"]

    compileOnly rootProject.ext.dependencies["glide"]
    annotationProcessor(rootProject.ext.dependencies["glide-compiler"]) {
        exclude module: 'jsr305'
    }

    //tools
    compileOnly rootProject.ext.dependencies["javax.annotation"]
    api rootProject.ext.dependencies["gson"]

    api rootProject.ext.dependencies["utilcodex"]
    api rootProject.ext.dependencies["toast"]
    api rootProject.ext.dependencies["timber"]

    api rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
}

//publish {
//    repoName = project.POM_REPO_NAME
//    userOrg = project.POM_DEVELOPER_ID
//    groupId = project.GROUP
//    artifactId = project.POM_NAME
//    publishVersion = project.PUBLISH_VERSION
//    desc = project.POM_DESCRIPTION
//    website = project.POM_URL
//    bintrayUser = properties.getProperty("bintray.user")
//    bintrayKey = properties.getProperty("bintray.apikey")
//}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}